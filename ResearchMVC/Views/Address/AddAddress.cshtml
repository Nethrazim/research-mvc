@{
    Layout = "~/Views/Shared/_InAppLayout.cshtml";
}

@{
    ViewBag.Title = "Add Addresses";
}
<style>
    label {
        width: 200px;
        margin-right: 20px;
    }

    input, select {
        width: 250px;
    }

    input[type=submit] {
        width: 200px;
    }
</style>
@model ResearchMVC.BusinessLogic.DTOs.BusinessEntityAddressDTO
<div class="page">
    <div class="row">
        <div class="d-flex page-top-bar">
            <div class="mr-auto p-2"><h5>Add Addresses</h5></div>
            <div class="p-2">@{Html.RenderAction("Index", "Back", new { link = "Index", controller = "Person" });}</div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="page-content">
                @using (Html.BeginForm("AddAddress", "Address", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()
                    @Html.ValidationMessage("Internal Server Error")
                    @Html.HiddenFor(m => m.BusinessEntityID)
                    <div>
                        <div>
                            <label>Address Type: </label>
                            @{
                                var addressTypeOptions = ((List<Tuple<int, string>>)(ViewBag.AddressTypes))
                                    .Where(el => !((List<int>)ViewBag.ExistingAddressTypes).Contains(el.Item1))
                                    .Select(c => new SelectListItem() { Text = c.Item2, Value = c.Item1.ToString() });
                            }
                            @Html.DropDownListFor(m => m.AddressType.AddressTypeID, addressTypeOptions)
                        </div>

                        <div>
                            <label>Address Line 1: </label>
                            @Html.TextBoxFor(m => m.Address.AddressLine1)
                        </div>
                        <div>
                            <label>Address Line 2: </label>
                            @Html.TextBoxFor(m => m.Address.AddressLine2)
                        </div>
                        <div>
                            <label>City: </label>
                            @Html.TextBoxFor(m => m.Address.City)
                        </div>
                        <div>
                            <label>Postal Code: </label>
                            @Html.TextBoxFor(m => m.Address.PostalCode)
                        </div>
                        <div>
                            <label>State Name: </label>
                            @{
                                var stateProvincesOptions = ((List<Tuple<int, string>>)(ViewBag.StateProvinces)).Select(c => new SelectListItem() { Text = c.Item2, Value = c.Item1.ToString() }).ToList();
                            }
                            @Html.DropDownListFor(m => m.Address.StateProvince.StateProvinceID, stateProvincesOptions)
                        </div>
                        <div>
                            <label>State Code (ISO3): </label>
                            @Html.TextBoxFor(m => m.Address.StateProvince.StateProvinceCode, new { disabled = true })
                        </div>
                        <div>
                            <label>Country Name: </label>
                            @Html.TextBoxFor(m => m.Address.StateProvince.CountryRegion.Name, new { disabled = true })
                        </div>
                        <div>
                            <label>Country Code (ISO3): </label>
                            @Html.TextBoxFor(m => m.Address.StateProvince.CountryRegion.CountryRegionCode, new { disabled = true })
                        </div>
                        <div>
                            <input class="btn-create" type="submit" value="CREATE" />
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="page-content">
                <div class="card app-vertical-notification-panel">
                    <div class="card-body">
                        <span>
                            This person does not have the following addresses:
                            <br />
                            @{
                                var remainingAddresses = ((List<Tuple<int, string>>)(ViewBag.AddressTypes))
                                        .Where(el => !((List<int>)ViewBag.ExistingAddressTypes).Contains(el.Item1))
                                        .Select(c => c.Item2);
                            }
                            @foreach (var rAdd in remainingAddresses)
                            {
                                <span class="highlight">@rAdd Address</span><br />
                            }
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#menu-item-persons").addClass("selected");
        toggleMenu($("#menu-item-persons .submenu-top-item a"));
    });
</script>
